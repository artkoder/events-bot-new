from __future__ import annotations

from pathlib import Path

import pytest

from telegraph.utils import nodes_to_html

from festival_activities import (
    MAX_YAML_SIZE,
    FestivalActivitiesError,
    activities_to_telegraph_nodes,
    build_activity_card_lines,
    format_location_line,
    parse_festival_activities_yaml,
)


def test_parse_festival_activities_yaml_success():
    yaml_text = (
        "version: 2\n"
        "festival_site: https://fest.example\n"
        "always_on:\n"
        "  - title: –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è\n"
        "    subtitle: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "    time: 10:00-20:00\n"
        "    location:\n"
        "      name: –ú—É–∑–µ–π –Ø–Ω—Ç–∞—Ä—è\n"
        "    description: –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "    price: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "    cta:\n"
        "      url: https://fest.example/info\n"
        "by_request:\n"
        "  - title: –ó–∞–∫—Ä—ã—Ç–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è\n"
        "    location: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ\n"
    )

    result = parse_festival_activities_yaml(yaml_text)

    assert result.festival_site == "https://fest.example"
    assert len(result.groups) == 2
    always_on = result.groups[0]
    assert always_on.title == "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –¥–µ–Ω—å"
    card = always_on.items[0]
    assert card.location.name == "–ú—É–∑–µ–π –Ø–Ω—Ç–∞—Ä—è"
    assert card.cta_url == "https://fest.example/info"
    assert not card.cta_label or card.cta_label == "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    # Unknown location triggers a warning
    assert result.warnings
    assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ" in result.warnings[0]

    payload = result.to_json_payload()
    assert payload[0]["kind"] == "meta"
    assert payload[1]["kind"] == "always_on"


def test_parse_festival_activities_yaml_size_limit():
    text = "version: 2\n" + "x" * (MAX_YAML_SIZE + 10)
    with pytest.raises(FestivalActivitiesError):
        parse_festival_activities_yaml(text)


def test_parse_festival_activities_yaml_requires_version():
    with pytest.raises(FestivalActivitiesError):
        parse_festival_activities_yaml("always_on: []\n")


def test_format_location_line():
    yaml_text = (
        "version: 2\n"
        "always_on:\n"
        "  - title: –î–æ—Å—Ç—É–ø–Ω–æ\n"
        "    location:\n"
        "      name: –ú—É–∑–µ–π –Ø–Ω—Ç–∞—Ä—è\n"
    )
    result = parse_festival_activities_yaml(yaml_text)
    location = result.groups[0].items[0].location
    assert format_location_line(location) == "–ú—É–∑–µ–π –Ø–Ω—Ç–∞—Ä—è, –ø–ª. –í–∞—Å–∏–ª–µ–≤—Å–∫–æ–≥–æ 1, –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"


def test_activity_nodes_snapshot(tmp_path: Path):
    yaml_text = (
        "version: 2\n"
        "always_on:\n"
        "  - title: –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è\n"
        "    subtitle: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "    description: –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
        "    cta:\n"
        "      label: –ë–∏–ª–µ—Ç—ã\n"
        "      url: https://fest.example/tickets\n"
    )
    result = parse_festival_activities_yaml(yaml_text)
    nodes = activities_to_telegraph_nodes(result.groups)
    html = nodes_to_html(nodes)
    expected = (
        "<p>\u200b</p><p>\u200b</p><h3>–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –¥–µ–Ω—å</h3>"
        "<h4>–≠–∫—Å–ø–æ–∑–∏—Ü–∏—è</h4><p>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å</p><p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</p>"
        "<p><a href=\"https://fest.example/tickets\">–ë–∏–ª–µ—Ç—ã</a></p><p>\u200b</p>"
    )
    assert html == expected


def test_build_activity_card_lines_order():
    yaml_text = (
        "version: 2\n"
        "always_on:\n"
        "  - title: –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è\n"
        "    time: 10:00\n"
        "    price: –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        "    age: 12+\n"
        "    tags: [art, kids]\n"
    )
    result = parse_festival_activities_yaml(yaml_text)
    card = result.groups[0].items[0]
    lines = build_activity_card_lines(card)
    assert lines[0] == "üïí 10:00"
    assert lines[1] == "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Ä¢ 12+ ‚Ä¢ art, kids"
